<div class="form-group {{ ElementGroup }}">
    {% if( ElementLabel is not empty ) %}
        <label>{{ ElementLabel }}{% if( Required is not empty ) %}<span class="text-danger"> *</span>{% endif %}</label>
    {% endif %}
    {% if( ElementIcon is not empty ) %}
    <div class="input-group">
        <span class="input-group-addon" data-trigger="hover" data-toggle="popover"
            {% if( ElementIconShow is not empty ) %}
                onclick="togglePassword{{ ElementName }}()"
                id="toggle_Icon{{ ElementName }}"
                {# einfaches Apostroph ' da sonnst die Icons die Übergabe kaputt machen #}
                data-icon-show='{{ ElementIconShow }}'
                data-icon='{{ ElementIcon }}'
            {% endif %}>
            {{ ElementIcon }}
        </span>
        {% endif %}
        <input type="password" id="fieldViewOption{{ ElementName }}" class="form-control{% if( ElementClass is not empty ) %}{{ ElementClass }}{% endif %}" name="{{ ElementName }}" placeholder="{{ ElementPlaceholder }}"
               value="{{ ElementValue }}" {% if( Disabled is not empty ) %}disabled{% endif %} {% if( Required is not empty ) %}required{% endif %} {% if( TabIndex is not empty ) %}tabindex="{{ TabIndex }}"{% endif %}/>
        {{ ElementFeedbackIcon }}
        {% if( ElementIcon is not empty ) %}
    </div>
    {% endif %}
    {{ ElementFeedbackMessage }}
</div>

{% if( ElementIconShow is not empty ) %}
<script>
    {# togglepassword muss für jedes Feld einen separaten Namen haben #}
    function togglePassword{{ ElementName }}() {
        var toggler = document.getElementById('fieldViewOption' + '{{ ElementName }}');
        var iconSwitch = document.getElementById('toggle_Icon' + '{{ ElementName }}');

        // Passwort sichtbar machen
        toggler.type = (toggler.type === "password") ? "text" : "password";

        // Icon ändern über dataset
        iconSwitch.innerHTML = (iconSwitch.innerHTML.trim() === iconSwitch.dataset.icon)
            ? iconSwitch.dataset.iconShow
            : iconSwitch.dataset.icon;
    }

</script>
{% endif %}
{% if( AutoFocus is not empty ) %}
    <script type="text/javascript">
        //noinspection JSUnresolvedFunction
        executeScript(function ()
        {
            Client.Use('ModAlways', function ()
            {
                setTimeout(function ()
                {
                    jQuery('input[name="{{ ElementName }}"]').focus().val('');
                }, 300);
            });
        });
    </script>
{% endif %}

{% if( AjaxEventChange is not empty or AjaxEventKeyUp is not empty ) %}
    <script type="text/javascript">

        var typewatch = function ()
        {
            var timer = 0;
            return function (callback, ms)
            {
                clearTimeout(timer);
                timer = setTimeout(callback, ms);
            }
        }();

        //noinspection JSUnresolvedFunction
        executeScript(function ()
        {
            Client.Use('ModAlways', function ()
            {
                Client.Use('ModAjax', function ()
                {
                    {% if( AjaxEventChange is not empty ) %}
                    jQuery('input[type="password"][name="{{ ElementName }}"]').on('change', function (Event)
                    {
                        Event.preventDefault();
                        {{ AjaxEventChange }}
                    });
                    {% endif %}
                    {% if( AjaxEventKeyUp is not empty ) %}
                    jQuery('input[type="password"][name="{{ ElementName }}"]').on('keyup', function (Event)
                    {
                        typewatch(function ()
                        {
                            Event.preventDefault();
                            {{ AjaxEventKeyUp }}
                        }, 500);
                    });
                    {% endif %}
                });
            });
        });
    </script>
{% endif %}