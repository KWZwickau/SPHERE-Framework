<div class="form-group {{ ElementGroup }}">
    {% if( ElementLabel is not empty ) %}
        <label for="{{ ElementName }}">{{ ElementLabel }}{% if( Required is not empty ) %}<span
                    class="text-danger"> *</span>{% endif %}</label>
    {% endif %}
    {% if( ElementIcon is not empty or ElementPrefix is not empty ) %}
        <div class="input-group">
            {% if( ElementIcon is not empty ) %}
                <span class="input-group-addon">
                    {{ ElementIcon }}
                </span>
            {% endif %}
            {% if ElementPrefix is not empty %}
                <span class="input-group-addon input-group-prefix">
                    {{ ElementPrefix }}
                </span>
            {% endif %}
    {% endif %}
        <select id="{{ ElementName }}" name="{{ ElementName }}"
                {% if( Disabled is not empty ) %}disabled{% endif %} {% if( TabIndex is not empty ) %}tabindex="{{ TabIndex }}"{% endif %}>
            {% for Value, Title in ElementData %}
                <option value="{{ Value }}">{{ Title }}</option>
            {% endfor %}
        </select>
        {{ ElementFeedbackIcon }}
        {% if( ElementIcon is not empty or ElementPrefix is not empty ) %}
            </div>
        {% endif %}
    {{ ElementFeedbackMessage }}
</div>
<script type="text/javascript">
    //noinspection JSUnresolvedFunction
    executeScript(function () {
        Client.Use('ModSelect2', function () {
            var guiSelect = jQuery('select[name="{{ ElementName }}"]');
            {#guiSelect.find('option[value="{{ ElementValue }}"]').attr('selected', 'selected');#}
            guiSelect.ModSelect2({{ ElementConfiguration }});
            guiSelect.on('change keyup blur', function () {
                if( guiSelect.val() == 0 ) {
                    guiSelect.next().find('span.select2-selection__rendered').css('color','silver');
                } else {
                    guiSelect.next().find('span.select2-selection__rendered').css('color','');
                }
            });

            setTimeout(function(){
                {% if( ElementValue ) %}
                    guiSelect.val('{{ ElementValue }}'); // Select the option with a value of 'ElementValue'
                {% else %}
                    guiSelect.val('0');
                    guiSelect.next().find('span.select2-selection__rendered').css('color','silver');
                {% endif %}
                guiSelect.trigger('change'); // Notify any JS components that the value changed
            },1);

            guiSelect.next().find('span.select2-selection__arrow b').css('border-top-color','silver');

// TODO: on demand option Tab-Open
//            guiSelect.data().select2.on("focus", function () {
//                guiSelect.select2("open");
//            });

            // Fix: (Hack) respect Tab-Index
            guiSelect.on('select2:close', function(e) {
                $LiveElement = $(this).closest($('select[name ="'+e.currentTarget.name+'"'));
                var setfocus = setTimeout(function() {
                    $LiveElement.select2('focus');
                }, 10);
            });
        });
        {% if( AjaxEventChange is not empty or AjaxEventKeyUp is not empty ) %}
            Client.Use('ModAlways', function()
            {
                Client.Use('ModAjax', function()
                {
                    {% if( AjaxEventChange is not empty ) %}
                    jQuery('select[name="{{ ElementName }}"]').on('change',function(Event){
                        Event.preventDefault();
                        {{ AjaxEventChange }}
                    });
                    {% endif %}
                    {% if( AjaxEventKeyUp is not empty ) %}
                    jQuery('select[name="{{ ElementName }}"]').on('keyup',function(Event){
                        // Exclude Keys
                        var KeyCode = Event.which;
                        // Code 9 = TAB
                        // Code 37,38,39,40 = LEFT,UP,RIGHT,DOWN Arrow
                        if(
                            KeyCode === 9
                            || KeyCode === 37
                            || KeyCode === 38
                            || KeyCode === 39
                            || KeyCode === 40
                        ) {
                            return;
                        }

                        typewatch(function ()
                        {
                            Event.preventDefault();
                            {{ AjaxEventKeyUp }}
                        }, 500);
                    });
                    {% endif %}
                });
            });
        {% endif %}
    });
</script>
